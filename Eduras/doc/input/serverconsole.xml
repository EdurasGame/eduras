<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
	<articleinfo>
		<title>Server console</title>
	</articleinfo>
	<section>
		<title>(jme) What is this?</title>
		<para>
			The server console is a simple tool that lets hosts modify
			server and game
			configuration at runtime. This includes kicking
			players, changing game mode, etc.
		</para>
		<para>
			You can access it via a simple command line interface. We plan to allow
			external
			access (imagine a ssh connection) to be able to connect to server console
			at runtime.
		</para>
	</section>
	<section>
		<title>(jme) Available commands</title>
		<table frame="all">
			<title>Server console commands</title>
			<tgroup cols="5">
				<thead>
					<row>
						<entry>Command</entry>
						<entry>Description</entry>
						<entry>arg1</entry>
						<entry>arg2</entry>
						<entry>arg3</entry>
					</row>
				</thead>
				<tbody>
				    <row>
						<entry>help</entry>
						<entry>Prints a list of all available commands</entry>
						<entry>-</entry>
						<entry>-</entry>
						<entry>-</entry>
					</row>
				    <row>
						<entry>kick</entry>
						<entry>Kicks a player</entry>
						<entry>playerId</entry>
						<entry>-</entry>
						<entry>-</entry>
					</row>
					<row>
						<entry>map</entry>
						<entry>Changes map to given map</entry>
						<entry>newMap</entry>
						<entry>-</entry>
						<entry>-</entry>
					</row>
					<row>
						<entry>mode</entry>
						<entry>Changes game mode</entry>
						<entry>newMode</entry>
						<entry>-</entry>
						<entry>-</entry>
					</row>
					<row>
						<entry>players</entry>
						<entry>Lists all players online</entry>
						<entry>-</entry>
						<entry>-</entry>
						<entry>-</entry>
					</row>
					<row>
						<entry>respawn</entry>
						<entry>Lets target player respawn</entry>
						<entry>playerId</entry>
						<entry>-</entry>
						<entry>-</entry>
					</row>
					<row>
						<entry>shutdown</entry>
						<entry>shuts down server</entry>
						<entry>-</entry>
						<entry>-</entry>
						<entry>-</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>(jme) Architecture</title>
		<para>
		    The server console is a singleton that holds a list of commands
		    and has access to a ConsoleEventTriggerer.
		    User input will be parsed and command's onCommand method will be called.
		</para>

	</section>
	<section>
		<title>(jme) How to implement new commands</title>
		<para>
		    Implemenenting a new console command is one of the easiest things you can do.
		    Just follow these steps to complete the creation of a new command.
		</para>
		<section>
		    <title>Step 1</title>
		    <para>
		    	Have a look at the <computeroutput>ConsoleEventTriggerer</computeroutput>
		  		in logic package. You have to implement a method for your command here to
		  		access the server logic.
		    </para>
		</section>
		<section>
		    <title>Step 2</title>
		    <para>
		   		After you finished that, move over to
		   		<computeroutput>serverconsole.commands</computeroutput> package and create
		    	a new class for your command that inherits
		    	from <computeroutput>ConsoleCommand</computeroutput>.
			</para>
			<para>
		   		You will see that you need at least two methods:
			</para>
			<itemizedlist>
		    	<listitem>
		        	<para>A constructor that calls the superconstructor in the following way:
		            	<computeroutput>super(String commmand, String description)</computeroutput>
		        	</para>
		    	</listitem>
		    	<listitem>
		        	<para>
		            	The overridden method:
		        	</para>
		        	<programlisting>
@Override
public void onCommand(String[] args, ServerConsole console, ConsoleEventTriggerer triggerer)
{ ... }</programlisting>
		    	</listitem>
			</itemizedlist>
			<para>
			    In the constructor, you can access several methods to specify your command.
			    The console automatically checks for a valid number of arguements. To
			    influence this for your command, use one or multiple of the following
			    methods:
			</para>
			<itemizedlist>
			    <listitem>
			        <para><computeroutput>setMaximumNumArgs(int)</computeroutput></para>
			    </listitem>
			    <listitem>
			        <para><computeroutput>setMinimumNumArgs(int)</computeroutput></para>
			    </listitem>
			    <listitem>
			        <para><computeroutput>setExactNumArgs(int)</computeroutput></para>
			    </listitem>
			</itemizedlist>
			<para>
			    Consider the JavaDoc for detailed information on them.
			</para>
			<para>
			    <emphasis>Important note:</emphasis> If you use
			    <computeroutput>setMaximumNumArgs</computeroutput>
			    and <computeroutput>setMinimumNumArgs</computeroutput>,
			    call <computeroutput>setMaximumNumArgs</computeroutput> first! 
			</para>
			<para>
			    To print your output to console, you can use
			    <computeroutput>console.println(String)</computeroutput> and
			    <computeroutput>console.printlnf(String, Object...)</computeroutput>.
			    See JavaDoc for details.
			</para>
		</section>
		<section>
		    <title>Step 3</title>
		    <para>
		    	Finally, you have to register the event to the console. This is generally done in
		    	<computeroutput>CommandInitializer</computeroutput> in the same package.
		    	Just add a line for your command and it will be available on console start. 
			</para>
			<para>
		    	Alternatively you can register your command at any time you want at runtime.
		    	To do so, just call from anywhere the method
		    	<computeroutput>ServerConsole.registerCommand(ServerCommand)</computeroutput>
		    	and the command will be initialized on the fly.
			</para>
		</section>
	</section>
</article>